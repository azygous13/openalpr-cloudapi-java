/*
 * OpenALPR Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.openalpr.api;

import com.openalpr.api.invoker.ApiCallback;
import com.openalpr.api.invoker.ApiClient;
import com.openalpr.api.invoker.ApiException;
import com.openalpr.api.invoker.ApiResponse;
import com.openalpr.api.invoker.Configuration;
import com.openalpr.api.invoker.Pair;
import com.openalpr.api.invoker.ProgressRequestBody;
import com.openalpr.api.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.openalpr.api.models.InlineResponse200;
import com.openalpr.api.models.InlineResponse400;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for recognizeBytes
     * @param imageBytes The image file that you wish to analyze encoded in base64  (required)
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @param prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call recognizeBytesCall(String imageBytes, String secretKey, String country, Integer recognizeVehicle, String state, Integer returnImage, Integer topn, String prewarp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = imageBytes;
        
        // create path and map variables
        String localVarPath = "/recognize_bytes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (secretKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "secret_key", secretKey));
        if (recognizeVehicle != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "recognize_vehicle", recognizeVehicle));
        if (country != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "country", country));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "state", state));
        if (returnImage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "return_image", returnImage));
        if (topn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "topn", topn));
        if (prewarp != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "prewarp", prewarp));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call recognizeBytesValidateBeforeCall(String imageBytes, String secretKey, String country, Integer recognizeVehicle, String state, Integer returnImage, Integer topn, String prewarp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'imageBytes' is set
        if (imageBytes == null) {
            throw new ApiException("Missing the required parameter 'imageBytes' when calling recognizeBytes(Async)");
        }
        
        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling recognizeBytes(Async)");
        }
        
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling recognizeBytes(Async)");
        }
        
        
        com.squareup.okhttp.Call call = recognizeBytesCall(imageBytes, secretKey, country, recognizeVehicle, state, returnImage, topn, prewarp, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as base64 encoded bytes. 
     * @param imageBytes The image file that you wish to analyze encoded in base64  (required)
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @param prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 recognizeBytes(String imageBytes, String secretKey, String country, Integer recognizeVehicle, String state, Integer returnImage, Integer topn, String prewarp) throws ApiException {
        ApiResponse<InlineResponse200> resp = recognizeBytesWithHttpInfo(imageBytes, secretKey, country, recognizeVehicle, state, returnImage, topn, prewarp);
        return resp.getData();
    }

    /**
     * 
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as base64 encoded bytes. 
     * @param imageBytes The image file that you wish to analyze encoded in base64  (required)
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @param prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> recognizeBytesWithHttpInfo(String imageBytes, String secretKey, String country, Integer recognizeVehicle, String state, Integer returnImage, Integer topn, String prewarp) throws ApiException {
        com.squareup.okhttp.Call call = recognizeBytesValidateBeforeCall(imageBytes, secretKey, country, recognizeVehicle, state, returnImage, topn, prewarp, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as base64 encoded bytes. 
     * @param imageBytes The image file that you wish to analyze encoded in base64  (required)
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @param prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call recognizeBytesAsync(String imageBytes, String secretKey, String country, Integer recognizeVehicle, String state, Integer returnImage, Integer topn, String prewarp, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = recognizeBytesValidateBeforeCall(imageBytes, secretKey, country, recognizeVehicle, state, returnImage, topn, prewarp, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for recognizeFile
     * @param image The image file that you wish to analyze  (required)
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @param prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call recognizeFileCall(File image, String secretKey, String country, Integer recognizeVehicle, String state, Integer returnImage, Integer topn, String prewarp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/recognize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (secretKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "secret_key", secretKey));
        if (recognizeVehicle != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "recognize_vehicle", recognizeVehicle));
        if (country != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "country", country));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "state", state));
        if (returnImage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "return_image", returnImage));
        if (topn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "topn", topn));
        if (prewarp != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "prewarp", prewarp));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null)
        localVarFormParams.put("image", image);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call recognizeFileValidateBeforeCall(File image, String secretKey, String country, Integer recognizeVehicle, String state, Integer returnImage, Integer topn, String prewarp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling recognizeFile(Async)");
        }
        
        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling recognizeFile(Async)");
        }
        
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling recognizeFile(Async)");
        }
        
        
        com.squareup.okhttp.Call call = recognizeFileCall(image, secretKey, country, recognizeVehicle, state, returnImage, topn, prewarp, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as a file using a form data POST 
     * @param image The image file that you wish to analyze  (required)
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @param prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 recognizeFile(File image, String secretKey, String country, Integer recognizeVehicle, String state, Integer returnImage, Integer topn, String prewarp) throws ApiException {
        ApiResponse<InlineResponse200> resp = recognizeFileWithHttpInfo(image, secretKey, country, recognizeVehicle, state, returnImage, topn, prewarp);
        return resp.getData();
    }

    /**
     * 
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as a file using a form data POST 
     * @param image The image file that you wish to analyze  (required)
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @param prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> recognizeFileWithHttpInfo(File image, String secretKey, String country, Integer recognizeVehicle, String state, Integer returnImage, Integer topn, String prewarp) throws ApiException {
        com.squareup.okhttp.Call call = recognizeFileValidateBeforeCall(image, secretKey, country, recognizeVehicle, state, returnImage, topn, prewarp, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as a file using a form data POST 
     * @param image The image file that you wish to analyze  (required)
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @param prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call recognizeFileAsync(File image, String secretKey, String country, Integer recognizeVehicle, String state, Integer returnImage, Integer topn, String prewarp, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = recognizeFileValidateBeforeCall(image, secretKey, country, recognizeVehicle, state, returnImage, topn, prewarp, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for recognizeUrl
     * @param imageUrl A URL to an image that you wish to analyze  (required)
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @param prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call recognizeUrlCall(String imageUrl, String secretKey, String country, Integer recognizeVehicle, String state, Integer returnImage, Integer topn, String prewarp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/recognize_url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (imageUrl != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "image_url", imageUrl));
        if (secretKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "secret_key", secretKey));
        if (recognizeVehicle != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "recognize_vehicle", recognizeVehicle));
        if (country != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "country", country));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "state", state));
        if (returnImage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "return_image", returnImage));
        if (topn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "topn", topn));
        if (prewarp != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "prewarp", prewarp));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call recognizeUrlValidateBeforeCall(String imageUrl, String secretKey, String country, Integer recognizeVehicle, String state, Integer returnImage, Integer topn, String prewarp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'imageUrl' is set
        if (imageUrl == null) {
            throw new ApiException("Missing the required parameter 'imageUrl' when calling recognizeUrl(Async)");
        }
        
        // verify the required parameter 'secretKey' is set
        if (secretKey == null) {
            throw new ApiException("Missing the required parameter 'secretKey' when calling recognizeUrl(Async)");
        }
        
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling recognizeUrl(Async)");
        }
        
        
        com.squareup.okhttp.Call call = recognizeUrlCall(imageUrl, secretKey, country, recognizeVehicle, state, returnImage, topn, prewarp, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as a URL.  The OpenALPR service will download the image  and process it 
     * @param imageUrl A URL to an image that you wish to analyze  (required)
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @param prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 recognizeUrl(String imageUrl, String secretKey, String country, Integer recognizeVehicle, String state, Integer returnImage, Integer topn, String prewarp) throws ApiException {
        ApiResponse<InlineResponse200> resp = recognizeUrlWithHttpInfo(imageUrl, secretKey, country, recognizeVehicle, state, returnImage, topn, prewarp);
        return resp.getData();
    }

    /**
     * 
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as a URL.  The OpenALPR service will download the image  and process it 
     * @param imageUrl A URL to an image that you wish to analyze  (required)
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @param prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> recognizeUrlWithHttpInfo(String imageUrl, String secretKey, String country, Integer recognizeVehicle, String state, Integer returnImage, Integer topn, String prewarp) throws ApiException {
        com.squareup.okhttp.Call call = recognizeUrlValidateBeforeCall(imageUrl, secretKey, country, recognizeVehicle, state, returnImage, topn, prewarp, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Send an image for OpenALPR to analyze and provide metadata back The image is sent as a URL.  The OpenALPR service will download the image  and process it 
     * @param imageUrl A URL to an image that you wish to analyze  (required)
     * @param secretKey The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
     * @param country Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config  (required)
     * @param recognizeVehicle If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     * @param state Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )
     * @param returnImage If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     * @param topn The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     * @param prewarp Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call recognizeUrlAsync(String imageUrl, String secretKey, String country, Integer recognizeVehicle, String state, Integer returnImage, Integer topn, String prewarp, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = recognizeUrlValidateBeforeCall(imageUrl, secretKey, country, recognizeVehicle, state, returnImage, topn, prewarp, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
